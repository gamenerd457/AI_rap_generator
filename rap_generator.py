# -*- coding: utf-8 -*-
"""rap_generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NeZV-JwkT_4MIvtttu92Emw00ClgLEEL
"""

import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
  
# This module is imported so that we can 
# play the converted audio
from gtts import gTTS
import os

data = open('/content/rap_data.txt').read() # reading the data and converting it to lower case
corpus=data.lower().split("\n")
tokenizer=Tokenizer()#tokenizing the words
tokenizer.fit_on_texts(corpus)
total_words=len(tokenizer.word_index)+1 # we are adding 1 to consider outer words
input_sequences=[]
for line in corpus:
	token_list=tokenizer.texts_to_sequences([line])[0] # each line will be tokenized and stored 
	for i in range(1,len(token_list)):
		n_gram_sequence=token_list[:i+1] # creating ngarms like the first 2 words will be one sequence or first 3 words will be one sequence
		input_sequences.append(n_gram_sequence)


max_sequence_len=max([len(x) for x in input_sequences])#finding the longest sequence
input_sequences=np.array(pad_sequences(input_sequences,maxlen=max_sequence_len,padding="pre")) # prepadding the sequences 
xs=input_sequences[:,:-1] # in a sequence the words upto the last one will be x and the last word will be y
labels=input_sequences[:,-1]
ys=tf.keras.utils.to_categorical(labels,num_classes=total_words) # one hot encoding  the labels

model=Sequential() # creating the model
model.add(Embedding(total_words,100,input_length=max_sequence_len-1)) # here we are subtracting one because we took the last word as label
model.add(Bidirectional(LSTM(150)))
model.add(Dense(total_words,activation="softmax"))
model.compile(loss="categorical_crossentropy",optimizer="adam",metrics=["accuracy"])
model.fit(xs,ys,epochs=70,verbose=1)
model.save("rap_gen.h5") #saving the model

seed_text="My trophy on that Bound bike I gave you only pipe" #given this sentence predict the next 100 words
next_words=100
test_model=tf.keras.models.load_model("/content/rap_gen.h5") # load the model

for _ in range(next_words):
	token_list=tokenizer.texts_to_sequences([seed_text])[0] #tokenziing the seed text and padding it
	token_list=pad_sequences([token_list],maxlen=max_sequence_len-1,padding="pre")
	predicted=test_model.predict_classes(token_list,verbose=0) #given the sequence predict he next word
	output_word=""
	for word,index in tokenizer.word_index.items():
		if index==predicted:
			output_word=word
			break
	seed_text+=" "+output_word  # add each predicted word to the seed text in each iteration
print(seed_text)




# The text that you want to convert to audio

  
# Language in which you want to convert
language = 'en-uk'
  
# Passing the text and language to the engine, 
# here we have marked slow=False. Which tells 
# the module that the converted audio should 
# have a high speed
myobj = gTTS(text=seed_text, lang=language, slow=False)
  
# Saving the converted audio in a mp3 file named
# welcome 
myobj.save("rap_gen.mp3")

